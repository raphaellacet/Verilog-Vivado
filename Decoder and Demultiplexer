module Dec_2_4 (en, in, out);
input en;
input [1:0] in;
output reg [3:0] out;
always@(in)
    if(en==1)
    begin
        case(in)
            2'b00: out = 4'b0000;
            2'b01: out = 4'b0000;
            2'b10: out = 4'b0000;
            2'b11: out = 4'b0000;
        endcase
    end
    else
    begin
        out = in;
    end 
endmodule

module Dec2to4 (en, in, out);
input en;
input [1:0] in;
output reg [3:0] out;
always@(in or en)
begin
    if(en==1)
        case(in)
            4'b00: out = 4'b0001;
            4'b01: out = 4'b0010;
            4'b10: out = 4'b0100;
            4'b11: out = 4'b1000;
        endcase
    else if (en==0)
    begin
        out = 4'b0000;
        end 
    end
endmodule

module Dec3to8(
input [2:0] A,
output [7:0] D
);
Dec2to4 Decoder2to4Small(
.en(~A[2]),
.in(A[1:0]),
.out(D[3:0])
);
Dec2to4 Decoder2to4Big(
.en(A[2]),
.in(A[1:0]),
.out(D[7:4])
);
endmodule

module Dec2to4_Sim();
reg [2:0] A_t;
wire [7:0] D_t;
Dec3to8 UUT(
.A(A_t),
.D(D_t)
);

initial begin
    A_t = 3'b000;
end

always #10 A_t[0] = ~A_t[0];
always #20 A_t[1] = ~A_t[1];
always #40 A_t[2] = ~A_t[2];
endmodule
